{"version":3,"sources":["components/Weather.js","components/WeatherItems.js","components/LocationSelector.js","components/hooks/Fetch.js","App.js","config.js","reportWebVitals.js","index.js"],"names":["Weather","tempK","tempFeelsLikeK","tempMinK","tempMaxK","dt","main","icon","humidity","wind","convertKelvinToFahrenheit","kelvin","toFixed","tempF","tempFeelsLikeF","tempMaxF","tempMinF","dateNew","Date","date","temp_date","split","convertDate","toLocaleDateString","timeOri","toLocaleTimeString","timeHrMin","replace","className","id","src","alt","WeatherItems","weathers","city","map","weather","temp","feels_like","temp_max","temp_min","speed","LocationSelector","handleSubmit","useState","location","setLocation","type","name","placeholder","value","onChange","e","target","onClick","Fetch","startUrl","data","setData","error","setError","loading","setLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","App","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94a20853.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather = ({tempK, tempFeelsLikeK, tempMinK, tempMaxK, dt, main, icon, humidity,wind}) => {\n\n    const convertDate = (date) => {\n        var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let temp_date = date.split(\"/\");\n\n        return  months[temp_date[0]-1] + \", \" + temp_date[1] + \", \" + temp_date[2];\n    }\n\n    const convertTime = (time) => {\n        return time.replace(/:\\d+ /, ' ');\n    }\n    \n    const convertKelvinToFahrenheit = (kelvin) => {\n       return ((kelvin - 273.15) * 9/5 + 32).toFixed()\n    }\n\n  \n\n    let tempF = convertKelvinToFahrenheit(tempK)\n    let tempFeelsLikeF = convertKelvinToFahrenheit(tempFeelsLikeK)\n    let tempMaxF = convertKelvinToFahrenheit(tempMaxK)\n    let tempMinF = convertKelvinToFahrenheit(tempMinK)\n\n    const dateNew = new Date(dt)\n    const dateStr = dateNew.toLocaleDateString()\n    const date = convertDate(dateStr)\n\n    const timeOri = dateNew.toLocaleTimeString()\n    const timeHrMin = convertTime(timeOri)\n\n    return (\n\n        <div className=\"item flex item\">\n                <div className=\"red\">\n                      <p id=\"date\">{date}</p> \n                    <p><span id=\"time\">{timeHrMin}</span></p>\n                        <div>\n                            <p className=\"temp\">{tempF}째F </p>\n                            <p className=\"img-icon\"> <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"weather-icon\" /> </p>\n                            <p className=\"main\">{main}</p>           \n                        </div>\n                            <p className=\"blue\">Feels Like: <span>{tempFeelsLikeF}째 F</span></p>\n                            <p className=\"blue\">High: <span>{tempMaxF}째F</span></p>\n                            <p className=\"blue\">Low: <span>{tempMinF}째F</span></p>    \n                            <p className=\"blue\">Wind: <span>{wind} mph</span>  </p>\n                            <p className=\"blue\">Humidity: <span>{humidity}%</span></p>\n                            \n                </div>\n        </div>\n    )\n\n\n};\n\nexport default Weather;","import React from 'react'\nimport Weather from './Weather';\n\n\n\nconst WeatherItems= ({weathers, city}) => {\n    return (\n        <div className=\"container flex\">\n           {weathers.map(({dt, main, weather, wind}) => (\n                <div key={dt}>\n                    <Weather\n                    tempK={main.temp}\n                    tempFeelsLikeK={main.feels_like}\n                    tempMaxK={main.temp_max} \n                    tempMinK={main.temp_min} \n                    humidity={main.humidity}\n                    dt={dt * 1000} \n                    main={weather[0].main} \n                    icon={weather[0].icon} \n                    wind={wind.speed}\n                  />\n                </div>\n            ))} \n        </div>\n    )\n}\n\nexport default WeatherItems;","import React, {useState} from 'react';\n\n\nconst LocationSelector = ({handleSubmit}) => {\n    const [location,setLocation] = useState('');\n   \n\n    return (\n        <div className=\"location-selector\">\n            <h1>Search For 3 Hour Weather</h1>\n            <input \n                type=\"search\" \n                id=\"site-search\" \n                name=\"search-input\" \n                placeholder=\"Enter your city\" \n                value={location} \n                onChange={(e) => setLocation(e.target.value)}>\n            </input>\n            <button className=\"button\" onClick={() => handleSubmit(location)}>Search</button>\n        </div>\n    )\n\n};\n\nexport default LocationSelector;","import {useState, useEffect} from 'react';\n\nconst Fetch = (startUrl) => {\n  // create state variables\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [url, setUrl] = useState(startUrl);\n\n\n  useEffect(() => {\n    if(!url) return;\n    setLoading(true);\n    // clear old search\n    setData(null);\n    setError(null);\n\n    fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n\n            // error handling for nonexistent data\n            setLoading(false);\n            if(data.cod >= 400) {\n                setError(data.message);\n                return;\n            }\n            setData(data);\n        })\n        .catch((error) => {\n            setLoading(false);\n            setError(error);\n        });\n        //use effect will load everytime the url changes\n  }, [url]);\n//return what you want your other components to have access to\n  return { data, error, loading, setUrl };\n};\n\nexport default Fetch;\n\n\n\n\n\n\n\n","import './App.css';\nimport WeatherItems from './components/WeatherItems';\nimport LocationSelector from './components/LocationSelector';\nimport Fetch from './components/hooks/Fetch.js'\nimport {API_KEY, API_BASE_URL} from './config';\n\nfunction App() {\n  const {data, error, setUrl, loading} = Fetch();\n\n  const getData = () => {\n    if(error) return <h2>Error: {error}</h2>\n    if(!data && loading) return <h2>..loading..</h2>\n    if(!data) return null;\n  \n    return <WeatherItems weathers={data.list} city={data.city} />\n  };\n \n  return (\n    <div className=\"App\">\n      <LocationSelector handleSubmit={(location) => setUrl(`${API_BASE_URL}/data/2.5/forecast?q=${location},us&appid=${API_KEY}`)} />\n      \n      {getData()}\n       \n      \n    </div>\n  );\n}\n\nexport default App;\n","export const API_KEY = 'e7278c91b9fd8a5d042a01ba44db775b';\nexport const API_BASE_URL = 'http://api.openweathermap.org';","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}